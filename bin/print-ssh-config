#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Generate an ~/.ssh/config file for a VPC environment.

If a jumpbox exists at `jump.${environment}` in the VPC,
forward connections through it.

Note: This prints to STDOUT.
"""
import argparse

from boto.ec2 import EC2Connection
from boto.vpc import VPCConnection


def parse_arguments():
    """
    Parse provided command line arguments, fallback to defaults
    """
    parser = argparse.ArgumentParser(
        description=__doc__,
    )
    parser.add_argument(
        '-e',
        '--environment',
        help=(
            'one of [sandbox, stage, lagunita, suclass, cme, etc], '
            'defaults to all'
        ),
        default=None,
    )
    parser.add_argument(
        '-u',
        '--username',
        help='probably your Github username',
        required=True,
    )
    arguments = parser.parse_args()
    return arguments


def main(arguments):
    connection_ec2 = EC2Connection()
    connection_vpc = VPCConnection()
    vpc_filters = {
    }
    if arguments.environment:
        vpc_filters['tag:environment'] = arguments.environment
    vpcs = connection_vpc.get_all_vpcs(filters=vpc_filters)
    yield 'Host *'
    yield '    ForwardAgent yes'
    yield '    User {username}'.format(
        username=arguments.username,
    )
    for vpc in vpcs:
        yield ''
        vpc_name = vpc.tags.get('Name')
        if vpc_name.endswith('-vpc'):
            vpc_name = vpc_name[:-4]
        instances = connection_ec2.get_only_instances(
            filters={
                'vpc-id': vpc.id,
            },
        )
        jumpbox = [
            instance
            for instance in instances
            if instance.tags.get('Name', '').startswith('jumpbox.')
        ]
        if len(jumpbox):
            jumpbox = jumpbox[0]
        for instance in instances:
            if 'Name' not in instance.tags:
                continue
            yield 'Host {name}'.format(
                name=instance.tags['Name'],
            )
            if jumpbox and instance.id != jumpbox.id:
                yield '    ProxyCommand ssh -W {ip_address}:%p {jumpbox}'.format(
                    ip_address=instance.private_ip_address,
                    jumpbox=jumpbox.tags['Name'],
                )
            elif getattr(instance, 'ip_address', None):
                yield '    HostName {ip_address}'.format(
                    ip_address=instance.ip_address,
                )


if __name__ == '__main__':
    arguments = parse_arguments()
    for line in main(arguments):
        print(line)
