#!/usr/bin/env ansible-playbook
---
- name: Register
  hosts: localhost
  gather_facts: True
  vars:
    Number: 1
    elb_name: "{{ Deployment }}-elb-{{ Cluster }}"
  vars_files:
    - "../../../etc/ansible/vars/{{ Deployment }}/vpc.yml"
  tasks:
    - name: Lookup existing instances (todo=run)
      local_action:
        module: ec2_lookup
        region: "{{ region }}"
        tags:
          Deployment: "{{ Deployment }}"
          Cluster: "{{ Cluster }}"
          Number: "{{ Number|int }}"
          Name: "{{ Deployment }}-box-{{ Cluster }}-{{ Number }}"
          todo: run
      register: ec2_old
    - name: Lookup new instances (todo=deploy)
      local_action:
        module: ec2_lookup
        region: "{{ region }}"
        tags:
          Deployment: "{{ Deployment }}"
          Cluster: "{{ Cluster }}"
          Number: "{{ Number|int }}"
          Name: "{{ Deployment }}-box-{{ Cluster }}-{{ Number }}"
          todo: deploy
      register: ec2_new
    - pause: minutes=2
    - name: Add new instance to load balancer
      with_items: ec2_new.instance_ids
      local_action:
        module: ec2_elb
        instance_id: "{{ item }}"
        ec2_elbs: "{{ elb_name }}"
        state: present
        region: "{{ region }}"
    - name: Tag new instance (todo=run)
      with_items: ec2_new.instance_ids
      ec2_tag:
        resource: '{{ item }}'
        region: '{{ region }}'
        state: present
        tags:
          todo: run
    - name: "Add private DNS name for instance ({{ Cluster }}-{{ Number }}.{{ Deployment }}.vpc)"
      with_items: ec2_new.instances
      local_action:
        module: route53
        overwrite: yes
        command: create
        zone: "{{ dns_zone }}"
        type: A
        ttl: 300
        record: "{{ dns_name }}.{{ dns_zone }}"
        value: "{{ item.private_ip_address }}"
        private_zone: yes
    - name: Remove old instances from load balancer (TODO=run)
      with_items: ec2_old.instance_ids
      local_action:
        module: ec2_elb
        instance_id: "{{ item }}"
        ec2_elbs: "{{ elb_name }}"
        state: absent
        region: 'us-west-1'
    - name: Tag old instances (todo=archive)
      with_items: ec2_old.instance_ids
      ec2_tag:
        resource: '{{ item }}'
        region: '{{ region }}'
        state: present
        tags:
          todo: archive
    - name: Stop old the instances (todo=archive)
      with_items: ec2_old.instance_ids
      ec2:
        instance_ids: '{{ item }}'
        region: '{{ region }}'
        state: stopped
        wait: True
    - name: Terminate old instances (todo=archive)
      with_items: ec2_old.instance_ids
      ec2:
        instance_ids: '{{ item }}'
        region: '{{ region }}'
        state: absent
        wait: True
      when: terminate_instances is defined and terminate_instances == 'yes'
